{
  "start": 1577882700000,
  "duration": 10,
  "room": "UB5.132",
  "title": "Buildtest: HPC Software Stack Testing Framework",
  "subtitle": "",
  "track": "HPC, Big Data, and Data Science",
  "abstract": "<p>HPC support teams are often tasked with installing\nscientific software for their user community and the complexity of\nmanaging a large software stack gets very challenging. Software\ninstallation brings forth many challenges that requires a team of\ndomain expertise and countless hours troubleshooting to build an\noptimal software state that is tuned to the architecture. In the past\ndecade, two software build tools (Easybuild, Spack) have emerged\nthat are widely accepted in HPC community to accelerate building\na complete software stack for HPC systems. The support team are\nconstantly involved in fulfilling software request for end-users\nwhich leads to an ever-growing software ecosystem. Once a\nsoftware is installed, the support team hands it off to the user\nwithout any testing because scientific software requires domain\nexpertise in order to test software. Some software packages are\nshipped with a test suite that can be run at post build while many\nsoftware have no mechanism for testing. This poses a knowledge\ngap between HPC support team and end-users on the type of\ntesting to do. Some HPC centers may have developed in-house test\nscripts that are suitable for testing their software, but these tests\nare not portable due to hardcoded paths and are often site\ndependent. In addition, there is no collaboration between HPC\nsites in building a test repository that will benefit the community.\nIn this talk I will presents buildtest, a framework to automate software\ntesting for a software stack along with several module operations\nthat would be of interest to the HPC support team.</p>",
  "description": "<p>HPC computing environment is a tightly coupled system that\nincludes a cluster of nodes and accelerators interconnected with\na high-speed interconnect, a parallel filesystem,multiple storage\ntiers, a batch scheduler for users to submit jobs to the cluster and\na software stack for users to run their workflows. A software\nstack is a collection of compilers, MPI, libraries, system utilities\nand scientific packages typically installed in a parallel filesystem.\nA module tool like environment-modules or Lmod is generally used for loading the software environment into\nthe users\u2019 shell environment.</p>\n\n<p>Software are packaged in various forms that determine how\nthey are installed. A few package formats are: binary, Makefile,\nCMake, Autoconf, github, PyPi, Conda, RPM,tarball, rubygem,\nMakeCp, jar, and many more. With many packaging formats,\nthis creates a burden for HPC support team to learn how to build\nsoftware since each one has a unique build process. Software\nbuild tools like Easybuild and Spack can build up to\n1000+ software packages by supporting many packaging\nformats to address all sorts of software builds. Easybuild and\nSpack provide end-end software build automation that helps\nHPC site to build a very large software stack with many\ncombinatorial software configurations. During the installation,\nsome packages will provide a test harness that can be executed\nvia Easybuild or Spack which typically invokes a make test or\nctest for packages that follow ConfigureMake, Autoconf, or\nCMake install process.</p>\n\n<p>Many HPC sites rely on their users for testing the software\nstack, and some sites may develop in-house test scripts to run\nsanity check for popular scientific tools. Despite these efforts,\nthere is little or no collaboration between HPC sites on sharing\ntests because they are site-specific and often provide no\ndocumentation. For many sites, the HPC support team don\u2019t\nhave the time for conducting software stack testing because: (1)\nlack of domain expertise and understaffed, (2) no standard testsuite and framework to automate test build and execution.\nFrankly, HPC support teams are so busy with important day-day\noperation and engineering projects that software testing is either\nneglected or left to end-users. This demands for a concerted\neffort by HPC community to build a strong open-source\ncommunity around software stack testing.</p>\n\n<p>There are two points that need to be addressed. First, we need\na framework to do automatic testing of installed software stack.\nSecond, is to build a test repository for scientific software that is\ncommunity driven and reusable amongst the HPC community.\nAn automated test framework is a harness for automating the\ntest creation process, but it requires a community contribution to\naccumulate this repository on per-package basis. Before we\ndive in, this talk will focus on conducting sanity check of the\nsoftware stack so tests will need to be generic with simple\nexamples that can be compiled easily. In future, buildtest will\nfocus on domain-specific tests once there is a strong community\nbehind this project.</p>",
  "persons": [
    "Shahzeb Siddiqui"
  ]
}