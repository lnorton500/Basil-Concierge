{
  "start": 1577898000000,
  "duration": 50,
  "room": "K.1.105 (La Fontaine)",
  "title": "Guix: Unifying provisioning, deployment, and package management in the age of containers",
  "subtitle": "",
  "track": "Containers and Security",
  "abstract": "This talk will reflect on what GNU Guix has to offer to users and how it compares to other approaches\u2014from CONDA and pip to Flatpak and Docker.  Guix is not only a transactional package manager and declarative GNU/Linux distribution: it\u2019s also an environment manager, a container provisioning tool, and more.  We will describe these tools and our journey to 1.0, emphasizing key properties that set Guix apart:\nreproducibility, transparency, and hackability.",
  "description": "When it comes to software deployment, we are getting used to a new distribution of roles among many actors: traditional distros take care\nof core software pieces, \u201capplication bundles\u201d \u00e0 la Docker/Flatpak provide complex applications, Cabal, Gem, npm, pip, and friends take care of language-specific software, and Puppet/Ansible orchestrate the whole thing.  Each of these tools has its justification, but the end result is a maze that\u2019s hard to deal with.\n\nIn this talk I will present GNU Guix, a software deployment toolbox and its associated distro that feature transactional upgrades and rollbacks, declarative OS deployment inspired by Nix, and reproducible builds.  I will show how Guix approaches a variety of use cases: \u201cpackage management\u201d \u00e0 la apt-get, environment management \u00e0 la VirtualEnv, Ansible-style declarative OS deployment, and container provisioning \u00e0 la Docker.\n\nGuix emphasizes programmability and one of its salient features is that it provides a unified Scheme programming environment to deal with with all the aspects of configuration, deployment, and system management\u2014including service management by PID 1.  I will illustrate how\nthis works out on standalone Guix systems, and show the benefits of the approach by discussing applications that take advantage of Guix as a library to support reproducible software deployment.\n\nLast, I will reflect on the road that led to Guix 1.0 six months ago and present some of the challenges ahead.",
  "persons": [
    "Ludovic Court\u00e8s"
  ]
}