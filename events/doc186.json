{
  "start": 1577881800000,
  "duration": 30,
  "room": "AW1.126",
  "title": "DataLad",
  "subtitle": "Perpetual decentralized management of digital objects for collaborative open science",
  "track": "Open Research Tools and Technologies",
  "abstract": "<p>Contemporary sciences are heavily data-driven, but today's data management technologies and sharing practices fall at least a decade behind software ecosystem counterparts.\nMerely providing file access is insufficient for a simple reason: data are not static. Data often (and should!) continue to evolve; file formats can change, bugs will be fixed, new data are added, and derived data needs to be integrated.\nWhile (distributed) version control systems are a de-facto standard for open source software development, a similar level of tooling and culture is not present in the open data community.</p>\n\n<p>The lecture introduces DataLad, a software that aims to address this problem by providing a feature-rich API (command line and Python) for joint management of all digital objects of science: source code, data artifacts (as much as their derivatives), and essential utilities, such as container images of employed computational environments.\nA DataLad dataset represents a comprehensive and actionable unit that can be used privately, or be published on today's cyberinfrastructure (GitLab, GitHub, Figshare, S3, Google Drive, etc.) to facilitate large and small-scale collaborations.</p>\n\n<p>In addition to essential version control tasks, DataLad aids data discovery by supporting a plurality of evolving metadata description standards. Moreover, Datalad is able to capture data provenance information in a way that enables programmatic re-execution of computations, and as such provides a key feature for the implementation of reproducible science.\nDataLad is extensible and customizable to fine tune its functionality to specific domains (e.g., field of science or organizational requirements).</p>\n\n<p>DataLad is built on a few key principles:</p>\n\n<ol>\n<li><p><strong>DataLad only knows about two things: Datasets and files.</strong>\nA DataLad dataset is a collection of files in folders.\nAnd a file is the smallest unit any dataset can contain.\nAt its core, <strong>DataLad is a completely domain-agnostic, general-purpose tool to manage data</strong>.</p></li>\n<li><p><strong>A dataset is a Git repository</strong>.\nA dataset is a Git repository. All features of the version control system Git\nalso apply to everything managed by DataLad.</p></li>\n<li><p><strong>A DataLad dataset can take care of managing and version controlling arbitrarily large data</strong>.\nTo do this, it has an optional <em>annex</em> for (large) file content:\nThanks to this annex, DataLad can track files that are TBs in size\n(something that Git could not do, and that allows you to restore previous versions of data,\ntransform and work with it while capturing all provenance,\nor share it with whomever you want). At the same time, DataLad does all of the magic\nnecessary to get this important feature to work quietly in the background.\nThe annex is set-up automatically, and the tool <a href=\"https://git-annex.branchable.com\">git-annex</a> manages it all underneath the hood.</p></li>\n<li><p>DataLad follows the social principle to\n<strong>minimize custom procedures and data structures</strong>. DataLad will not transform\nyour files into something that only DataLad or a specialized tool can read.\nA PDF file (or any other type of\nfile) stays a PDF file (or whatever other type of file it was)\nwhether it is managed by DataLad or not. This guarantees that users will not loose\ndata or data access if DataLad would vanish from their system, or even when DataLad\nwould vanish from the face of Earth. Using DataLad thus does not require or generate\ndata structures that can only be used or read with DataLad -- DataLad does not\ntie you down, it liberates you.</p></li>\n<li><p>Furthermore, DataLad is developed for <strong>complete decentralization</strong>.\nThere is no required central server or service necessary to use DataLad. In this\nway, no central infrastructure needs to be maintained (or paid for) --\nyour own laptop is the perfect place to live for your DataLad project, as is your\ninstitutions webserver, or any other common computational infrastructure you\nmight be using.</p></li>\n<li><p>Simultaneously, though, DataLad aims to\n<strong>maximize the (re-)use of existing 3rd-party data resources and infrastructure</strong>.\nUsers <em>can</em> use existing central infrastructure should they want to.\nDataLad works with any infrastructure from GitHub to\nDropbox, Figshare, or institutional repositories,\nenabling users to harvest all of the advantages of their preferred\ninfrastructure without tying anyone down to central services.</p></li>\n</ol>",
  "description": "",
  "persons": [
    "Michael Hanke"
  ]
}