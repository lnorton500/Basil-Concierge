{
  "start": 1577873400000,
  "duration": 20,
  "room": "AW1.125",
  "title": "XL, an extensible programming language",
  "subtitle": "A language that grows with Moore's law instead of being killed by it",
  "track": "Minimalistic, Experimental and Emerging Languages",
  "abstract": "XL is an extensible programming language, designed to grow with Moore's law instead of being killed by it.\nExtensible means that programmers can add features and notations much like they would add functions or classes in existing languages.\nThe mechanisms are based on meta-programming, and are a bit similar to the macros that gave Lisp its longevity, but with interesting twists.\nAs a proof of this extensibility, basic arithmetic (addition, multiplication, etc) or control statements (if-then-else, loops, etc) are implemented by libraries in XL, yet offer similar performance and usability as built-in features in C++.\nAnother validation of the extensibility is Tao3D, an XL-based interactive graphic language that will be used to give the presentation.",
  "description": "XL is an extensible programming language, designed to grow with Moore's law instead of being killed by it. Every 5 year or so, a major paradigm arrives, that makes earlier languages obsolete. Past examples include object-oriented programming, distributed programming or application extension languages. The inability of classical programming languages to integrate such changes also leads to a number of niche languages implementing minority paradigms, ranging from Prolog to make to yaml.\n\nExtensible in XL means that programmers can add features and notations much like they would add functions or classes in existing languages. XL is quite minimalist, since all this is done using a single operator written \"is\".\nThis operator can be used to define variable (X is 0), functions (is_even X is X mod 2 = 0), multi-operator expressions (X in Y..Z is X &gt;= Y and X &lt; Z), or programming constructs. Loops are defined in XL as follows:\n\nloop Body is\n    Body\n    loop Body\n\n\nThis extensibility mechanisms is therefore based on meta-programming, and are in that way similar to the macros that gave Lisp its longevity. Lisp was first to normalize object-oriented programming with CLOS. But XL has interesting twists.\nFor starters, there is a strong focus on making notations match concepts. For example, XL will let you write (1 + 2 * 3) or program if statements that look normal. This is actually important.\n\nThis talk will give three proofs of this extensibility:\n\n\nThe standard library of XL provides things that have to be put in the compiler in other languages, like basic arithmetic (addition, multiplication, etc), basic control statements (if-then-else, while loops, etc), the module system, and so on. The compiler is actually in the library (or rather, it will be, one day).\nThe Tao3D language turned XL into a functional reactive 3D document description language. That would have been a stretch for C, and maybe even for Lisp, for reasons that will be discussed.\nELIoT, later renamed ELFE, and now integrated in trunk XL, turned XL into a distributed language, where you write one program and it executes on several machines, dispatching code around and exchanging data transparently.\n\n\n\nTao3D will actually be used to give the presentation.",
  "persons": [
    "Christophe de Dinechin"
  ]
}