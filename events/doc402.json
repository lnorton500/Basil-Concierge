{
  "start": 1577890800000,
  "duration": 25,
  "room": "UD2.218A",
  "title": "boot/loader \u2014 How to boot Linux and nothing else",
  "subtitle": "",
  "track": "Embedded, Mobile and Automotive",
  "abstract": "<p>To boot Linux on a new ARM/ARM64 platform we have to port Linux to that platform and a bootloader. Aside from the platform setup code, we need to add and maintain some device drivers to both Linux and the bootloader. We decided to avoid the extra effort and get rid of the dedicated bootloader. With a few dozen lines of assembly code, Linux Kernel and a pinch of userland tools the \"boot\" kernel was running with all the cool features we wanted! Then we used kexec(2) to start a \"full\" Linux kernel.</p>",
  "description": "<h1>How to boot Linux and nothing else</h1>\n\n<p>To boot Linux on a new ARM/ARM64 platform we have to port Linux to that platform and a bootloader. Aside from the platform setup code, we need to add at least some platform specific device drivers both Linux and the bootloader and maintain the drivers in both trees. We decided to avoid the extra effort and get rid of the dedicated bootloader.</p>\n\n<p>We took a widely available Odroid XU4 board and replaced bootloader (U-Boot) with a few dozen lines of assembly code, Linux Kernel and a pinch of userland tools. The \"boot\" kernel was running with all the cool features we wanted! Then we used kexec(2) to start a \"full\" Linux kernel.</p>\n\n<p>Dedicated bootloaders perform two types of tasks: platform specific setup and management (starting an OS, managing OS updates). We show that Linux is a better environment to implement management proccedures.</p>\n\n<p>We want to share our experience and encourage others to join our effort to use Linux Kernel as a bootloader on ARM/ARM64 platforms.</p>\n\n<h1>Target audience</h1>\n\n<p>The presentation is meant for everyone interested in how the Linux Kernel handles the boot process and especially developers who commit to arch/* directories, and bootloader developers. We present our experience with ARM Odroid XU4 board, but we expect people working on other platforms will benefit too.</p>\n\n<h1>How we want to improve the ecosystem</h1>\n\n<p>Development of new bootloading code for ARM and other embedded platforms. We believe using Linux kernel for this task is beneficial in three different ways. Less platform specific code needs to be created and maintained in different repositories.  General purpose code like filesystem drivers or network stack are maintained better in Linux than in U-Boot. This, as well as wide verity of libraries makes Linux better environment to develop advanced management functions (e.g OS updates, security checks etc.) in contemporary bootloader.</p>",
  "persons": [
    "\u0141ukasz Stelmach"
  ]
}