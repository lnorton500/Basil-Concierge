{
  "start": 1577890800000,
  "duration": 15,
  "room": "K.4.201",
  "title": "Support for mini-debuginfo in LLDB",
  "subtitle": "Debugging without installing debug-symbols, or how to read the .gnu_debugdata section.",
  "track": "Debugging Tools",
  "abstract": "The \"official\" mini-debuginfo man-page describes the topic best:\n\nSome systems ship pre-built executables and libraries that have a\nspecial .gnu_debugdata section. This feature is called MiniDebugInfo.\nThis section holds an LZMA-compressed object and is used to supply extra\nsymbols for backtraces.\n\nThe intent of this section is to provide extra minimal debugging information\nfor use in simple backtraces. It is not intended to be a replacement for\nfull separate debugging information (see Separate Debug Files).\n\nIn this talk I'll explain what it took to interpret support for mini-debuginfo\nin LLDB, how we've tested it, and what to think about when implementing this\nsupport (e.g. merging .symtab and .gnu_debugdata sections).",
  "description": "If the .symtab section is stripped from the binary it might be that\nthere's a .gnu_debugdata section which contains a smaller .symtab in\norder to provide enough information to create a backtrace with function\nnames or to set and hit a breakpoint on a function name.\n\nMy change looks for a .gnu_debugdata section in the ELF object file.\nThe .gnu_debugdata section contains a xz-compressed ELF file with a\n.symtab section inside. Symbols from that compressed .symtab section\nare merged with the main object file's .dynsym symbols (if any).\nIn addition we always load the .dynsym even if there's a .symtab\nsection.\n\nFor example, the Fedora and RHEL operating systems strip their binaries\nbut keep a .gnu_debugdata section. While gdb already can read this\nsection, LLDB until my patch couldn't. To test this patch on a\nFedora or RHEL operating system, try to set a breakpoint on the \"help\"\nsymbol in the \"zip\" binary. Before this patch, only GDB can set this\nbreakpoint; now LLDB also can do so without installing extra debug\nsymbols:\n\nlldb /usr/bin/zip -b -o \"b help\" -o \"r\" -o \"bt\" -- -h\n\n\nThe above line runs LLDB in batch mode and on the \"/usr/bin/zip -h\"\ntarget:\n\n(lldb) target create \"/usr/bin/zip\"\nCurrent executable set to '/usr/bin/zip' (x86_64).\n(lldb) settings set -- target.run-args  \"-h\"\n\n\nBefore the program starts, we set a breakpoint on the \"help\" symbol:\n\n(lldb) b help\nBreakpoint 1: where = zip`help, address = 0x00000000004093b0\n\n\nOnce the program is run and has hit the breakpoint we ask for a\nbacktrace:\n\n(lldb) r\nProcess 10073 stopped\n* thread #1, name = 'zip', stop reason = breakpoint 1.1\n    frame #0: 0x00000000004093b0 zip`help\nzip`help:\n-&gt;  0x4093b0 &lt;+0&gt;:  pushq  %r12\n    0x4093b2 &lt;+2&gt;:  movq   0x2af5f(%rip), %rsi       ;  + 4056\n    0x4093b9 &lt;+9&gt;:  movl   $0x1, %edi\n    0x4093be &lt;+14&gt;: xorl   %eax, %eax\n\nProcess 10073 launched: '/usr/bin/zip' (x86_64)\n(lldb) bt\n* thread #1, name = 'zip', stop reason = breakpoint 1.1\n  * frame #0: 0x00000000004093b0 zip`help\n    frame #1: 0x0000000000403970 zip`main + 3248\n    frame #2: 0x00007ffff7d8bf33 libc.so.6`__libc_start_main + 243\n    frame #3: 0x0000000000408cee zip`_start + 46\n\n\nIn order to support the .gnu_debugdata section, one has to have LZMA\ndevelopment headers installed. The CMake section, that controls this\npart looks for the LZMA headers and enables .gnu_debugdata support by\ndefault if they are found; otherwise or if explicitly requested, the\nminidebuginfo support is disabled.\n\nGDB supports the \"mini debuginfo\" section .gnu_debugdata since v7.6\n(2013).",
  "persons": [
    "Konrad Kleine"
  ]
}