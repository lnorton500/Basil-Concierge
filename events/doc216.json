{
  "start": 1577878200000,
  "duration": 20,
  "room": "K.3.401",
  "title": "Open ESP",
  "subtitle": "The Heterogeneous Open-Source Platform for Developing RISC-V Systems",
  "track": "RISC-V",
  "abstract": "ESP is an open-source research platform for RISC-V systems-on-chip that integrate many hardware accelerators.<br/>\nESP provides a vertically integrated design flow from software development and hardware integration to full-system prototyping on FPGA.  For application developers, ESP offers domain-specific automated solutions to synthesize new accelerators for their software and map it onto the heterogeneous SoC architecture.  For hardware engineers, ESP offers automated solutions to integrate their accelerator designs into the complete SoC.<br/>\nThe participants in this FOSDEM20 event will learn how to use ESP from the viewpoints of both application developers and hardware engineers by following a series of short hands-on tutorials embedded in the lecture.\nConceived as a heterogeneous integration platform and tested through years of teaching at Columbia University, ESP is intrinsically suited to foster collaborative engineering of RISC-V based SoCs across the open-source community.",
  "description": "<ul>\n<li>What is ESP?</li>\n</ul>\n\n\nESP is an open-source research platform to design and program heterogeneous systems-on-chip (SoCs).  A heterogeneous SoC combines multiple general-purpose processor cores and many specialized hardware accelerators.\n\n<ul>\n<li>What does ESP offer?</li>\n</ul>\n\n\nESP provides automated solutions to (a) synthesize new accelerators, (b) integrate them with RISC-V processors and other third party accelerators into a complete SoC, (c) rapidly prototype the SoC on an FPGA board, and (d) run software applications that take advantage of these accelerators.\nESP contributes to the open-source movement by supporting the realization of more scalable architectures for SoCs that integrate more heterogeneous components, thanks to a more flexible design methodology that accommodates different specification languages and design flows.\n\n<ul>\n<li>What is an example of an SoC prototype realized with ESP?</li>\n</ul>\n\n\nWith ESP's automation capabilities, it is easy to realize FPGA-based prototypes of complete SoCs.  For example, an SoC may feature the Ariane RISC-V processor core booting Linux, a multi-plane network-on-chip supporting a partitioned memory hierarchy with multiple DRAM controllers, and tens of loosely-coupled accelerators that execute coarse-grained tasks exchanging large amount of data with DRAM through direct-memory access (DMA).  These accelerators can be third-party open-source hardware components that \u201cspeak\u201d the AXI protocol (e.g. the NVIDIA NVDLA accelerator for deep learning) or new accelerators that can be synthesized with different design flows from specifications written in different languages, including: C with Xilinx Vivado HLS, SystemC with Cadence Stratus HLS, Keras TensorFlow and PyTorch with hls4ml, Chisel, SystemVerilog, Verilog, and VHDL.\n\n<ul>\n<li>Why is ESP relevant now?</li>\n</ul>\n\n\nInformation technology has entered the age of heterogeneous computing.  Across a variety of application domains, computing systems rely on highly heterogeneous architectures that combine multiple general-purpose processors with specialized hardware accelerators.  The complexity of these systems, however, threatens to widen the gap between the capabilities provided by semiconductor technologies and the productivity of computer engineers.  ESP tackles this challenge by raising the level of abstraction in the design process, simplifying the domain-specific programming of heterogeneous architectures, and leveraging the potential of the emerging open-source hardware movement.\n\n<ul>\n<li>What are some key ingredients of the ESP approach?</li>\n</ul>\n\n\nBuilding on years of research on communication-based system-level design at Columbia University, ESP combines an architecture and a methodology.  The flexible tile-based architecture simplifies the integration of heterogeneous components by balancing regularity and specialization.  The companion methodology raises the level of abstraction to system-level design, thus promoting closer collaboration among software programmers and hardware engineers.  Through the automatic generation of device drivers from pre-designed templates, ESP simplifies the invocation of accelerators from user-level applications executing on top of Linux.  Through the automatic generation of a multi-plane network-on-chip from a parameterized model, the ESP architecture can scale to accommodate many processors, tens of accelerators, and a distributed memory hierarchy.  A set of ESP Platform Services provides pre-validated solutions for accelerators configuration, memory management, sharing of system resources, and dynamic frequency scaling, among others.\n\n<ul>\n<li>How does ESP differ from other RISC-V based platforms?</li>\n</ul>\n\n\nTo date, the majority of the open-source hardware (OSH) efforts related to RISC-V have focused on the development of processor cores that implement the RISC-V ISA and small-scale SoCs that connect these cores with tightly-coupled functional units and coprocessors, typically through bus-based interconnects. Meanwhile, there have been less efforts in developing solutions for large-scale SoCs that combine RISC-V cores with many loosely-coupled components, such as coarse-grain accelerators, interconnected with a network-on-chip (NoC).  Compared to other RISC-V related projects, ESP is focused on scalability (with the NoC-based architecture), heterogeneity (with emphasis on loosely-coupled accelerators), and flexibility (with support of different design flows).  Just like the ESP architecture simplifies the integration of heterogeneous components developed by different teams, the ESP methodology embraces the use of heterogeneous design flows for component development.\n\n<ul>\n<li>Who are the authors of ESP?</li>\n</ul>\n\n\nESP has been developed by the System-Level Design (SLD) group in the Department of Computer Science at Columbia University during the past seven years.  The SLD group has published over a dozen scientific papers in peer-reviewed conferences and journals to describe the most innovative aspects of ESP.  ESP has been released as an open-source project via GitHub in the summer 2019.",
  "persons": [
    "Luca Carloni"
  ]
}