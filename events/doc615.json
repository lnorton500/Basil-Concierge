{
  "start": 1577893200000,
  "duration": 25,
  "room": "K.3.401",
  "title": "Rustifying the Virtual Machine Introspection ecosystem",
  "subtitle": "Why Rust is the best language for introspection agents in the future",
  "track": "Rust",
  "abstract": "<p>From stealth malware analysis to OS hardening through fuzzing, virtual machine\nintrospection is expanding the possibilities offered by our hypervisors,\nshifting our view of virtual machines, from opaques containers to fully\ntransparent and instrumentable systems.</p>\n\n<p>Today the VMI ecosystem is made of a multitude of applications, targeting one\nhypervisor or emulator, with their own semantic library. (Examples includes\nDrakvuf, PANDA, PyREBox, icebox, etc...). If we want to make the most out of VMI\nin the future, we need to build the libraries that will unify this ecosystem and\nlet the developers focus on what matters: building quality VMI apps.</p>\n\n<p>This is where libmicrovmi comes into play. It aims to solve this problem, by\nproviding a core, foundation library, written in Rust, to be cross-platform,\nhypervisor-agnostic and emulator-agnostic, on top of which higher-level\nlibraries and apps can rebase.</p>\n\n<p>Rust makes a lot of sense for VMI for 2 main reasons:</p>\n\n<ul>\n<li>Rust is safe: considering that we are processing untrusted input from virtual\nmachines, we cannot allow any crash or exploitation in the introspection\nagent. Also one of our use case is OS hardening, which needs an excellent\nlevel of trust</li>\n<li>Rust is fast: processing an event requires to pause the VCPU. The longer the\npause, the more delayed the guest execution will be, and when scaling to\nthousands of events per second this can dramatically influence how many breakpoints\nyou are willing to put, especially on production systems. Speed matters.</li>\n</ul>\n\n\n<p>Therefore Rust is the de facto choice for VMI apps in the future, and we are\nbuilding it today, by providing libmicrovmi, a new foundation for VMI.</p>\n\n<p>Libmicrovmi has drivers for:</p>\n\n<ul>\n<li>Xen</li>\n<li>KVM</li>\n<li>Hyper-V (in progress)</li>\n</ul>",
  "description": "<h1>What is VMI ?</h1>\n\n<p><em>Vrtual Machine Introspection</em> is a concept born in a 2003 research paper titled\n\"A Virtual Machine Introspection Based Architecture for Intrusion Detection\".\nThe idea resides in inspecting and understanding the real-time high-level state\nof a virtual machine, based on the hardware layer, for security purposes.</p>\n\n<p>Since then the technology has made its way, from research and academic\ndevelopments to being fully integrated and supported into mainstream\nhypervisors, like Xen.</p>\n\n<h1>What are the use-cases ?</h1>\n\n<p>The initial population who adopted VMI has been malware sandbox providers. Since\ncommon malware had a tendency to hide from debuggers, the level of stealth\nreached with this technology made it perfectly suited for this job, alongside\nthe full system view.</p>\n\n<p>Today VMI has grown to be applied in various domains:</p>\n\n<ul>\n<li>Debugging</li>\n<li>Malware Analysis</li>\n<li>Live Memory Analysis</li>\n<li>OS Hardening</li>\n<li>Fuzzing</li>\n</ul>\n\n\n<h1>What is the state of the technology today ?</h1>\n\n<p>As of today, Xen is the leading hypevisor, haivng VMI APIs since 2011. And since\n2017, both KVM and VirtualBox have patches available, and even reviewed on the\nmailing list for KVM.</p>\n\n<p>Regarding the libraries available, LibVMI stands out, as it provides a unified,\nhypervisor-agnostic, VMI API to applications, and a well-known malware analysis\nframework (Drakvuf) is based on it.</p>\n\n<p>However, most of VMI applications today do not share the same common set of core\nlibraries, which makes the ecosystem fragmented and hard to deal with, where a lot\nof efforts is spent solving the same problems everyone has, isolated by their\nown stacks.</p>\n\n<h1>Why Rust ?</h1>\n\n<p>This is where Rust comes into play. The language itself combines 3 important features:</p>\n\n<ul>\n<li>Safety: new VMI applications have a focus on OS hardening, rebasing your trust\non an introspection agent to avoid a kernel compromise is a huge deal,\nespecially when the agent has high-privileges.</li>\n<li>Speed: the amount of hardware events that can you can handle per second will\ndefine how much impact your agent has on the guest execution. This has to be\nkept as low as possible, otherwise the technology's adoption won't go further\nthan private malware analysis systems.</li>\n<li>Cross-platform: Rust's build system and standard library allow to effortlessly\nbuild a cross-plaform library, which is a requirements to bring developers\nusing KVM, Hyper-V or even VirtualBox to share the same library.</li>\n</ul>\n\n\n<p>Building this core library that will unify the ecosystem is the goal of libmicrovmi.</p>\n\n<h1>Related work</h1>\n\n<p>I have been building a hypervisor-level debugger, based on LibVMI. It can\nintrospect a Windows guest and debug a specific process, while providing a GDB\nstub to be plugged into your favorite GDB fronted (IDA, radare2, etc ....)</p>\n\n<h1>Expected knowledge</h1>\n\n<p>The audience will need a bit of familiarity with virtualization concepts, this\nwill be enough to understand the idea of introspection.</p>\n\n<p>They can be totally new to Rust, as I once was a few months ago.</p>",
  "persons": [
    "Mathieu Tarral"
  ]
}