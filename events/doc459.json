{
  "start": 1577893200000,
  "duration": 35,
  "room": "H.1301 (Cornil)",
  "title": "Dissecting the inline keyword in Kotlin",
  "subtitle": "A deep-dive into the internal working of the inline keyword",
  "track": "Kotlin",
  "abstract": "<p>Kotlin has a keyword called <code>inline</code>. While being mostly auto-suggested by the IDE, this little optimization forms the backbone for features like coroutines and APIs for sequences and collections and a lot more!</p>",
  "description": "<p>Java 8 introduced the concept of lambdas, while this was done at the language level, using bytecode instructions introduced in Java 7. Kotlin, tries to make this lambda functionality available for application targeting even Java 6! How does it do it? What optimizations does it do to make this compatibility happen?</p>\n\n<p>How does this feature form the backbone for features like coroutines and APIs for collections and sequences.</p>\n\n<p>How it doesn't stop there and introduces the concept of Inline classes, which enable Kotlin to have unsigned integers.</p>\n\n<p>How all of this is done, by just adding one keyword support in Kotlin!</p>",
  "persons": [
    "Suraj Shah"
  ]
}