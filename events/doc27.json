{
  "start": 1577894400000,
  "duration": 15,
  "room": "H.2215 (Ferrer)",
  "title": "Verifpal",
  "subtitle": "Cryptographic Protocol Analysis for Students and Engineers",
  "track": "Lightning Talks",
  "abstract": "<p>Verifpal is new software for verifying the security of cryptographic protocols. Building upon contemporary research in symbolic formal verification, Verifpal\u2019s main aim is to appeal more to real-world practitioners, students and engineers without sacrificing comprehensive formal verification features. Verifpal represents a serious attempt at making the formal analysis of advanced cryptographic systems such as Signal and TLS 1.3 easier to achieve.</p>",
  "description": "<p>Contemporary research in symbolic formal verification has led to confirming security guarantees (as well as finding attacks) in secure channel protocols such as TLS and Signal. However, formal verification in general has not managed to significantly exit the academic bubble. Verifpal is new software for verifying the security of cryptographic protocols that aims is to work better for real-world practitioners, students and engineers without sacrificing comprehensive formal verification features.</p>\n\n<p>In order to achieve this, Verifpal introduces a new, intuitive language for modeling protocols that is easier to write and understand than the languages employed by existing tools. Its formal verification paradigm is also designed explicitly to provide protocol modeling that avoids user error. By modeling principals explicitly and with discrete states, Verifpal models are able to be written in a way that reflects how protocols are described in the real world. At the same time, Verifpal is able to model protocols under an active attacker with unbounded sessions and fresh values, and supports queries for advanced security properties such as forward secrecy or key compromise impersonation.</p>\n\n<p>Verifpal has already been used to verify security properties for Signal, Scuttlebutt, TLS 1.3 and other protocols. It is a community-focused project, and available under a GPLv3 license.</p>\n\n<p>An Intuitive Protocol Modeling Language:\nThe Verifpal language is meant to illustrate protocols close to how one may describe them in an informal conversation, while still being precise and expressive enough for formal modeling. Verifpal reasons about the protocol model with explicit principals: Alice and Bob exist and have independent states.</p>\n\n<p>Modeling that Avoids User Error:\nVerifpal does not allow users to define their own cryptographic primitives. Instead, it comes with built-in cryptographic functions \u2014 this is meant to remove the potential for users to define fundamental cryptographic operations incorrectly.</p>\n\n<p>Easy to Understand Analysis Output:\nWhen a contradiction is found for a query, the result is related in a readable format that ties the attack to a real-world scenario. This is done by using terminology to indicate how the attack could have been possible, such as through a man-in-the-middle on ephemeral keys.</p>\n\n<p>Friendly and Integrated Software:\nVerifpal comes with a Visual Studio Code extension that offers syntax highlighting and, soon, live query verification within Visual Studio Code, allowing developers to obtain insights on their model as they are writing it.</p>",
  "persons": [
    "Nadim Kobeissi"
  ]
}