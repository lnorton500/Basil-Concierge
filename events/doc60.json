{
  "start": 1577899200000,
  "duration": 25,
  "room": "H.1302 (Depage)",
  "title": "Taming Metaspace: a look at the machinery, and a proposal for a better one",
  "subtitle": "",
  "track": "Free Java",
  "abstract": "When examining memory footprint of a JVM process, the delta between Java\nheap usage and actual working set size can be surprisingly large. The JVM\nuses off-heap memory for a lot of things: thread stacks, compiler arenas,\ncode heap, byte buffers, GC control... however, one of the largest\nconsumers of off-heap memory can be class metadata. Class metadata are\nstored in Metaspace, which includes the Compressed Class Space.\n\nThe talk will explore what Metaspace actually is and what is stored there;\ndescribe the architecture of the Metaspace allocator and the Compressed\nClass Space; how it interacts with the GC; how it is sized. We will\nhighlight waste areas and demonstrate how to use jcmd to examine Metaspace\ninternals.\n\nThe current implementation of the Metaspace allocator suffers from a number\nof shortcomings. They can manifest in excessive waste and a certain\n\"clinginess\" - an unwillingness to let go of unused memory.\n\nAt SAP, we developed an improved version which is more frugal with memory\nand provides a much improved elasticity. So the second part of this talk\nwill concentrate on our new implementation. We will highlight the\ndifferences to the old architecture, demonstrate advantages and examine how\nit works.",
  "description": "",
  "persons": [
    "Thomas St\u00fcfe"
  ]
}