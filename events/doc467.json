{
  "start": 1577880000000,
  "duration": 25,
  "room": "H.1302 (Depage)",
  "title": "Improve React App using design patterns",
  "subtitle": "Don't reinvent the wheel",
  "track": "JavaScript",
  "abstract": "Design patterns in layman's term are solutions to a recurring set of problems. Every problem has multiple solutions, design patterns are essentially a collection of the best solution for commonly occurring problems. These are not code snippets but the structure of the solution rather than the solution itself. Developers should learn design patterns so that they don\u2019t have to come up with new solutions to every problem for which optimal tested solutions already exist(Standing on the shoulder of giants). Participants will also learn a common vocabulary to talk about solution patterns (Ex: \u201cYou can use a higher order component to solve X\u201d). Once you understand design patterns you can identify them when you are going through a codebase and understand it from a higher perspective easily thus saving your time. Developers will be equipped with an array of patterns from which she can choose reusable solutions and avoid alternatives that can limit reusability. Developers will learn to write solutions in a mannerism that would be easily understandable by other developers(very important in large teams).",
  "description": "Design patterns in layman's term are solutions to a recurring set of problems. Every problem has multiple solutions, design patterns are essentially a collection of the best solution for commonly occurring problems. These are not code snippets but the structure of the solution rather than the solution itself. Developers should learn design patterns so that they don\u2019t have to come up with new solutions to every problem for which optimal tested solutions already exist(Standing on the shoulder of giants). Participants will also learn a common vocabulary to talk about solution patterns (Ex: \u201cYou can use a higher order component to solve X\u201d). Once you understand design patterns you can identify them when you are going through a codebase and understand it from a higher perspective easily thus saving your time. Developers will be equipped with an array of patterns from which she can choose reusable solutions and avoid alternatives that can limit reusability. Developers will learn to write solutions in a mannerism that would be easily understandable by other developers(very important in large teams).\n\nWriting components is hard, whereas writing reusable components is even harder.  As languages have become more powerful and have aspects of multiple programming paradigms(FP, OOP) it has opened up a new domain for us to explore in terms of design patterns.\n\nParticipants will learn patterns that are commonly used in ReactJS. We will demonstrate a handful of design patterns which we have across, old and new while working on the Red Hat OpenShift(Container platform designed to improve developer productivity.) user interface. They will learn to identify problems that can be easily solved with design patterns. We will also show implementations and share the thought process that goes into deciding the design pattern so they can learn how to implement and judge whether it\u2019s the best one.\n\nWe expect participants to be familiar with Javascript and ReactJS. If they would like to follow along then a laptop would be useful. This talk would be helpful to anyone who is new to React or even to a seasoned developer who is not aware of these patterns.\n\nOne short description of a design pattern and its use case:\nWe can consider the problem of composing a collection of components which all need to share a common state.\nBad Solution: Pass the state information to all the components through props manually.\nGood Solution: Create a parent component holding the state. Use components that require common state information as children of the parent component. And inside the parent component using React.Children.map function to pass the state information to all the children through cloning.\nThe good solution is known as \u201cCompound Component\u201d one of the many patterns we are going to talk about.",
  "persons": [
    "Ankush Behl"
  ]
}