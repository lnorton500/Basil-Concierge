{
  "start": 1577888100000,
  "duration": 40,
  "room": "K.4.201",
  "title": "Tools and mechanisms to debug BPF programs",
  "subtitle": "",
  "track": "Debugging Tools",
  "abstract": "<p>By allowing to safely load programs from user space and to execute them in the kernel, eBPF (extended Berkeley Packet Filter) has brought new possibilities to the Linux kernel, in particular in terms of tracing and network processing.</p>\n\n<p>But when a program fails to load, or when it does not return the expected values, what tools do we have to examine, inspect and debug eBPF objects? This talk focuses on the different tools and mechanisms available to help eBPF developers debug their programs, at the different stages of the workflow. From bpftool to test runs, let's find the best way to track bugs!</p>",
  "description": "<p>I am not sure how long the time slots for the debugging devroom are, so the\ncontent would be adapted according to the duration of the talk. The idea is to:</p>\n\n<ol>\n<li>Very briefly introduce the existing tools/mechanisms for debugging BPF\nprograms at each stage of the workflow</li>\n<li>Spend some time on a more in-depth introduction to bpftool, which can be\nused to perform a variety of operations on eBPF programs, maps, or BTF\nobjects</li>\n<li>Mention leads for future work</li>\n</ol>\n\n\n<p>In more details, this would look like:</p>\n\n<ol>\n<li>Different tools to debug</li>\n</ol>\n\n\n<p>1.1 Compilation time (make sure program is generated as intended)</p>\n\n<ul>\n<li>LLVM backend</li>\n<li>llvm-objdump</li>\n<li>eBPF assembly</li>\n</ul>\n\n\n<p>1.2 Load time / Verifier / JIT compile time (make sure program loads successfully)</p>\n\n<ul>\n<li>libbpf / ip / tc</li>\n<li>verifier logs, kernel logs, extack messages</li>\n<li>Documentation</li>\n<li>bpftool</li>\n</ul>\n\n\n<p>1.3 Runtime (make sure program return as expected)</p>\n\n<ul>\n<li>bpftool</li>\n<li>bpf<em>trace</em>printk() helper / perf events</li>\n<li>(user space BPF machines)</li>\n<li>BPF<em>PROG</em>TEST_RUN</li>\n<li>bpftool prog run</li>\n<li>perf annotations</li>\n<li>BTF debug information</li>\n<li>BPF trampolines: spy on BPF with BPF</li>\n</ul>\n\n\n<p>1.4 User space (develop programs that manipulate BPF objects)</p>\n\n<ul>\n<li>strace, valgrind support for bpf()</li>\n<li>probing kernel with bpftool</li>\n<li><p>using tools to generate BPF (bcc, bpftrace, libkefir, ...)</p></li>\n<li><p>bpftool introduction (with examples)</p></li>\n<li><p>listing objects</p></li>\n<li>loading programs, attaching programs, creating maps</li>\n<li>performing \u201ctest runs\u201d</li>\n<li>probing kernel for existing features</li>\n<li><p>taking over the world</p></li>\n<li><p>In the future?</p></li>\n<li><p>checking a program loads: bpftool prog probe object_file.o</p></li>\n<li>debugger: break points, dump for registers/stack/context?\n(Complete the support (hooks exist) in GDB? Extend BPF<em>PROG</em>TEST_RUN\ninfrastructure?)</li>\n</ul>",
  "persons": [
    "Quentin Monnet"
  ]
}